list.files(all.files = TRUE)
file.show("DESCRIPTION")
file.show('Read-and-delete-me')
file.remove('Read-and-delete-me')
setwd("~/Documents/Code/2020/BayesianPain/inst/stan")
setwd("~/Documents/Code/2020/BayesianPain/R")
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
devtools::install_github("r-lib/devtools")
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
devtools::install_github("r-lib/devtools")
install.packages("xml2")
install.packages("libxml-2.0")
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
devtools::install_github("r-lib/devtools")
library(devtools)
has_devel()
#> '/Library/Frameworks/R.framework/Resources/bin/R' --vanilla CMD SHLIB foo.c
#>
#> clang -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
#>   -I/usr/local/include -I/usr/local/include/freetype2 -I/opt/X11/include
#>   -fPIC  -Wall -mtune=core2 -g -O2  -c foo.c -o foo.o
#> clang -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup
#>   -single_module -multiply_defined suppress -L/usr/local/lib -o foo.so foo.o
#>   -F/Library/Frameworks/R.framework/.. -framework R -Wl,-framework
#>   -Wl,CoreFoundation
[1] TRUE
library(devtools)
has_devel()
.libPaths()
center_scale <- function(exp_data){
clean_data = data.frame()
for (s in unique(exp_data$S)){
subject_data       = subset(exp_data, S == s)
subject_fixed_data = subset(subject_data, Std == 0)
mod                <- lm(X ~ R, data = subject_fixed_data)
subject_data$R     <- predict(mod, data.frame(R = subject_data$R))
clean_data         <- rbind(clean_data,subject_data)
}
return(clean_data)
}
exp_data <- data.frame(read.csv('data/exp_1_data.csv', header = TRUE))
exp_data_raw <- data.frame(read.csv('data/exp_1_data.csv', header = TRUE))
exp_data <- center_scale(exp_data_raw)
View(center_scale)
packageVersion("loo")
packageVersion(loo)
packageVersion("ggplot2")
packageVersion("resphape2")
packageVersion("reshape2")
packageVersion("stats4")
packageVersion("viridis")
packageVersion("viridis")
packageVersion("knitr")
devtools::load_all(".")
roxygen2::roxygenize()
packageVersion("ggplot2")
devtools::load_all(".")
devtools::load_all(".")
roxygen2::roxygenize()
devtools::load_all(".")
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::load_all(".")
roxygen2::roxygenize()
example(source)
roxygen2::roxygenize()
roxygen2::roxygenize(load_code = sourceDir)
devtools::load_all(".")
devtools::load_all(".")
?center_scale
devtools::load_all(".")
roxygen2::roxygenize(load_code = sourceDir)
example(source)
roxygen2::roxygenize(load_code = sourceDir)
rlang::last_error()
example(source)
roxygen2::roxygenize(load_code = sourceDir)
devtools::load_all(".")
example(source)
roxygen2::roxygenize(load_code = sourceDir)
roxygen2::roxygenize()
roxygen2::roxygenize(load_code = sourceDir)
update.packages()
devtools::load_all(".")
roxygen2::roxygenize(load_code = sourceDir)
example(source)
roxygen2::roxygenize(load_code = sourceDir)
example(source)
roxygen2::roxygenize(load_code = sourceDir)
roxygen2::roxygenize()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rstan::options(mc.cores = parallel::detectCores())
?options
options(mc.cores = parallel::detectCores())
source('~/Documents/Code/2020/test.R', echo=TRUE)
devtools::load_all(".")
output <- BayesianPain::fit_models(models, stan_data)
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(1,2))
output <- BayesianPain::fit_models(models, stan_data)
output$DICs
devtools::install_github("dan-ak/bayesian-pain")
library(BayesianPain)
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
library("BayesianPain")
devtools::install_github("dan-ak/bayesian-pain")
devtools::install_github("dan-ak/bayesian-pain")
library(BayesianPain)
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
usethis::use_package("BayesianPain")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
devtools::document()
library(BayesianPain)
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(1))
output <- BayesianPain::fit_models(models, stan_data)
output$DICs
models <- BayesianPain::get_models(c(5))
output <- BayesianPain::fit_models(models, stan_data)
output$DICs
output <- BayesianPain::fit_models(models, stan_data, iter = 1000)
output$DICs
models <- BayesianPain::get_models(c(6))
output <- BayesianPain::fit_models(models, stan_data, iter = 600)
output$DICs
shape(output)
dim(output)
dim(output$fits)
len(output$fits)
length(output$fits)
output$fits
output$fits[1]
len(output$fits[[1]])
output$fits[[1]]
output$fits[[2]]
View(exp_1_data)
View(exp_2_data)
rstan::extract(output$fits[1])
rstan::extract(output$fits[[1]])
rstan::extract(output$fits[[2]])
draws <- rstan::extract(output$fits[[2]])
for (m in models){ print(m)}
length(models)
length(models[1])
length(models)[1]
length(models)[[1]]
names(draws)
summary(ouput$fits[[2]])[1:10]
summary(output$fits[[2]])[1:10]
summary(output$fits[[2]], pars = c('beta'))
summary(output$fits[[2]], pars = c('beta'))$summary
summary(output$fits[[2]], pars = c('beta'))
summary(output$fits[[2]], pars = c('beta'))$mean
summary(output$fits[[2]], pars = c('beta'))$summary
fit_summary <- summary(output$fits[[2]], pars = c('beta'))
fit_summary$summary
fit_summary <- rstan::summary(output$fits[[2]])
fit_summary <- rstan::summary(output$fits[[2]], pars= c('beta'))
fit_summary <- rstan::summary(output$fits[[2]], pars= c('beta', 'kappa'))
fit_summary <- rstan::summary(output$fits[[2]])
names(fit_summary)
names(fit_summary$summary)
length(stanfits)
length(output$fits)
fit_summary$summary
fit_summary$summary[1:10]$mean
fit_summary$summary[c('beta')]$mean
output$fits[[2]]@model_name
model_name <- output$fits[[2]]@model_name
model_params <- output$fits[[2]]@model_pars[1:5]
summary(output$fits[[2]], pars = model_params)$summary
summary(output$fits[[2]], pars = model_params)
data.frame(summary(output$fits[[2]], pars = model_params))$mean
(summary(output$fits[[2]], pars = model_params)$summary
sdf
summary(output$fits[[2]], pars = model_params)$summary
rstan::summary(output$fits[[2]], pars = model_params)$summary
rstan::summary(output$fits[[2]], pars = model_params)$mean
rstan::summary(output$fits[[2]], pars = model_params)$summary$mean
param_summary <- rstan::summary(output$fits[[2]], pars = model_params)$summary
data.frame(param_summary)
data.frame(param_summary)$mean
data.frame(param_summary)$mean['beta']
data.frame(param_summary)['beta']
data.frame(param_summary)$beta
data.frame(param_summary)$mean
param_df <-data.frame(rstan::summary(output$fits[[2]], pars = model_params)$summary)
param_df
colnames(param_df) <- model_name + '(mean)'
colnames(param_df) <- model_name
param_df
colnames(param_df) <- c(paste(model_name, '(mean)'), paste(model_name, '(sd)'))
param_df
param_df[1:2]
merge(param_df[1:2], param_df[1:2])
names(param_df)
rstan::summary(output$fits[[2]], pars = model_params)$summary[1:2]
rstan::summary(output$fits[[2]], pars = model_params)$summary
rstan::summary(output$fits[[2]], pars = model_params)$summary[,c("mean", "se_mean")]
colnames(rstan::summary(output$fits[[2]], pars = model_params)$summary[,c("mean", "se_mean")]) <- c('a','b')
param_matrix <- rstan::summary(output$fits[[2]], pars = model_params)$summary[,c("mean", "se_mean")]
param_matrix
data.frame(param_matrix)
merge(param_df, param_df, 0)
merge(param_df[1:2], param_df[1:2], 0)
merge_df <- merge(param_df[1:2], param_df[1:2], 0)
merge_df['beta']
merge_df['Row.names'='beta']
merge_df[Row.names='beta']
merge_df[rownames(merge_df) == 'beta']
print( merge_df[rownames(merge_df) == 'beta'])
print( merge_df[rownames(merge_df) == 1])
merge_df <- merge(merge_df, param_df[1:2], 0)
devtools::install_github("dan-ak/bayesian-pain")
library(BayesianPain)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
fit <- stanfits[i_m]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df < rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(param_df)
}
}
get_parameters(output$fits[[2]])
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
if (!is.NULL(stanfits[i_m])){
fit <- stanfits[i_m]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df < rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
if (!is.null(stanfits[i_m])){
fit <- stanfits[i_m]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df < rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df < rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(model_name)
print(param_df)
}
}
}
get_parameters(output$fits)
print(i_m)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(i_m)
print(model_name)
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in 0:length(stanfits)){
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(i_m)
print(model_name)
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in 0:length(stanfits)){
print(i_m)
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(i_m)
print(model_name)
print(param_df)
}
}
}
get_parameters <- function(stanfits){
for (i_m in 0:length(stanfits)){
print(i_m)
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(i_m)
print(model_name)
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in 1:length(stanfits)){
print(i_m)
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(i_m)
print(model_name)
print(param_df)
}
}
}
get_parameters(output$fits)
output$fits[1]
output$fits[[1]]
get_parameters <- function(stanfits){
for (i_m in 1:length(stanfits)){
print(i_m)
if (!is.null(stanfits[[i_m]])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(i_m)
print(model_name)
print(param_df)
}
}
}
output$fits[[1]]
get_parameters(output$fits)
devtools::load_all(".")
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(1,2,3,4,5,6))
output <- BayesianPain::fit_models(models, stan_data)
paste0(substring(models[6], 1 ,nchar(models[6])-6), "_mle.stan")
paste0(substring(models[6], 1 ,nchar(models[6])-5), "_mle.stan")
devtools::load_all(".")
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(6))
output <- BayesianPain::fit_models(models, stan_data)
devtools::load_all(".")
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(2))
fit <- rstan::stan(file=models[1], data = stan_data)
models[1]
fit <- rstan::stan(file=models[[1]], data = stan_data)
fit <- rstan::stan(file=models[[1]], data = stan_datai, iter=500, chains = 2)
fit <- rstan::stan(file=models[[1]], data = stan_datai, iter=500, chains = 2)
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(2))
fit <- rstan::stan(file=models[[1]], data = stan_datai, iter=200, chains = 1)
fit <- rstan::stan(file=models[[1]], data = stan_data, iter=200, chains = 1)
fit <- rstan::stan(file=models[[1]], data = stan_datai, iter=300, chains = 3)
fit <- rstan::stan(file=models[[1]], data = stan_data, iter=300, chains = 3)
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(2))
fit <- rstan::stan(file=models[[1]], data = stan_data, iter=1000, chains = 4)
util <- new.env()
source('stan_utility.R', local=util)
source('R/stan_utility.R', local=util)
util$check_all_diagnostics(fit)
util$check_all_diagnostics(fit[1])
util$check_all_diagnostics(fit)
print(fit)
partition <- util$partition_div(fit)
div_params <- partition[[1]]
nondiv_params <- partition[[2]]
util2 <- new.env()
source('R/stan_utility.R', local=util2)
util2$check_all_diagnostics(fit)
summary(fit)
summary(fit)$summary
summary(fit)[1]$summary
summary(fit[])
summary(fit)
summary(fit)
summary(fit[[1]])
params <- extract(fit)
rstan::summary(fit)
rstan::summary(fit)$summary
summary(fit)$summary
util2$check_all_diagnostics(fit)
util2$check_all_diagnostics(fit)
util2$check_all_diagnostics(fit)
devtools::load_all(".")
util2$check_all_diagnostics(fit)
util2 <- new.env()
source('R/stan_utility.R', local=util2)
util2$check_all_diagnostics(fit)
util2 <- new.env()
source('R/stan_utility.R', local=util2)
util2$check_all_diagnostics(fit)
util2 <- new.env()
util2 <- new.env()
source('R/stan_utility.R', local=util2)
util2$check_all_diagnostics(fit)
View(exp_data)
params = extract(fit)
params <- rstan::extract(fit)
plot(params$beta, params$rho)
models2 <- BayesianPain::get_models(c(3))
fit2 <- rstan::stan(file=models2[[1]], data = stan_data, iter=1000, chains = 4)
rstan::summary(fit, pars=c('beta', 'rho'))$summary
rstan::summary(fit2, pars=c('beta', 'rho'))$summary
calc_DIC(fit)
BayesianPain::calc_DIC(fit)
BayesianPain::calc_DIC(fit2)
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_1_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(1,2,3,4,5))
output <- BayesianPain::fit_models(models, stan_data, iter=1000, chains = 4)
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_1_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(1,2,3,4,5))
output <- BayesianPain::fit_models(models, stan_data, iter=1000, chains = 4)
