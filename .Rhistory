output$fits[[2]]
View(exp_1_data)
View(exp_2_data)
rstan::extract(output$fits[1])
rstan::extract(output$fits[[1]])
rstan::extract(output$fits[[2]])
draws <- rstan::extract(output$fits[[2]])
for (m in models){ print(m)}
length(models)
length(models[1])
length(models)[1]
length(models)[[1]]
names(draws)
summary(ouput$fits[[2]])[1:10]
summary(output$fits[[2]])[1:10]
summary(output$fits[[2]], pars = c('beta'))
summary(output$fits[[2]], pars = c('beta'))$summary
summary(output$fits[[2]], pars = c('beta'))
summary(output$fits[[2]], pars = c('beta'))$mean
summary(output$fits[[2]], pars = c('beta'))$summary
fit_summary <- summary(output$fits[[2]], pars = c('beta'))
fit_summary$summary
fit_summary <- rstan::summary(output$fits[[2]])
fit_summary <- rstan::summary(output$fits[[2]], pars= c('beta'))
fit_summary <- rstan::summary(output$fits[[2]], pars= c('beta', 'kappa'))
fit_summary <- rstan::summary(output$fits[[2]])
names(fit_summary)
names(fit_summary$summary)
length(stanfits)
length(output$fits)
fit_summary$summary
fit_summary$summary[1:10]$mean
fit_summary$summary[c('beta')]$mean
output$fits[[2]]@model_name
model_name <- output$fits[[2]]@model_name
model_params <- output$fits[[2]]@model_pars[1:5]
summary(output$fits[[2]], pars = model_params)$summary
summary(output$fits[[2]], pars = model_params)
data.frame(summary(output$fits[[2]], pars = model_params))$mean
(summary(output$fits[[2]], pars = model_params)$summary
sdf
summary(output$fits[[2]], pars = model_params)$summary
rstan::summary(output$fits[[2]], pars = model_params)$summary
rstan::summary(output$fits[[2]], pars = model_params)$mean
rstan::summary(output$fits[[2]], pars = model_params)$summary$mean
param_summary <- rstan::summary(output$fits[[2]], pars = model_params)$summary
data.frame(param_summary)
data.frame(param_summary)$mean
data.frame(param_summary)$mean['beta']
data.frame(param_summary)['beta']
data.frame(param_summary)$beta
data.frame(param_summary)$mean
param_df <-data.frame(rstan::summary(output$fits[[2]], pars = model_params)$summary)
param_df
colnames(param_df) <- model_name + '(mean)'
colnames(param_df) <- model_name
param_df
colnames(param_df) <- c(paste(model_name, '(mean)'), paste(model_name, '(sd)'))
param_df
param_df[1:2]
merge(param_df[1:2], param_df[1:2])
names(param_df)
rstan::summary(output$fits[[2]], pars = model_params)$summary[1:2]
rstan::summary(output$fits[[2]], pars = model_params)$summary
rstan::summary(output$fits[[2]], pars = model_params)$summary[,c("mean", "se_mean")]
colnames(rstan::summary(output$fits[[2]], pars = model_params)$summary[,c("mean", "se_mean")]) <- c('a','b')
param_matrix <- rstan::summary(output$fits[[2]], pars = model_params)$summary[,c("mean", "se_mean")]
param_matrix
data.frame(param_matrix)
merge(param_df, param_df, 0)
merge(param_df[1:2], param_df[1:2], 0)
merge_df <- merge(param_df[1:2], param_df[1:2], 0)
merge_df['beta']
merge_df['Row.names'='beta']
merge_df[Row.names='beta']
merge_df[rownames(merge_df) == 'beta']
print( merge_df[rownames(merge_df) == 'beta'])
print( merge_df[rownames(merge_df) == 1])
merge_df <- merge(merge_df, param_df[1:2], 0)
devtools::install_github("dan-ak/bayesian-pain")
library(BayesianPain)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
fit <- stanfits[i_m]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df < rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(param_df)
}
}
get_parameters(output$fits[[2]])
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
if (!is.NULL(stanfits[i_m])){
fit <- stanfits[i_m]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df < rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
if (!is.null(stanfits[i_m])){
fit <- stanfits[i_m]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df < rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df < rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(model_name)
print(param_df)
}
}
}
get_parameters(output$fits)
print(i_m)
get_parameters <- function(stanfits){
for (i_m in range(length(stanfits))){
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(i_m)
print(model_name)
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in 0:length(stanfits)){
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(i_m)
print(model_name)
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in 0:length(stanfits)){
print(i_m)
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(i_m)
print(model_name)
print(param_df)
}
}
}
get_parameters <- function(stanfits){
for (i_m in 0:length(stanfits)){
print(i_m)
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(i_m)
print(model_name)
print(param_df)
}
}
}
get_parameters(output$fits)
get_parameters <- function(stanfits){
for (i_m in 1:length(stanfits)){
print(i_m)
if (!is.null(stanfits[i_m])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(i_m)
print(model_name)
print(param_df)
}
}
}
get_parameters(output$fits)
output$fits[1]
output$fits[[1]]
get_parameters <- function(stanfits){
for (i_m in 1:length(stanfits)){
print(i_m)
if (!is.null(stanfits[[i_m]])){
fit <- stanfits[[i_m]]
model_name <- fit@model_name
model_params <- fit@model_pars[1:5]
param_df <- rstan::summary(fit, pars = model_params)$summary[,c("mean", "se_mean")]
print(i_m)
print(model_name)
print(param_df)
}
}
}
output$fits[[1]]
get_parameters(output$fits)
devtools::load_all(".")
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(1,2,3,4,5,6))
output <- BayesianPain::fit_models(models, stan_data)
paste0(substring(models[6], 1 ,nchar(models[6])-6), "_mle.stan")
paste0(substring(models[6], 1 ,nchar(models[6])-5), "_mle.stan")
devtools::load_all(".")
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(6))
output <- BayesianPain::fit_models(models, stan_data)
devtools::load_all(".")
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(2))
fit <- rstan::stan(file=models[1], data = stan_data)
models[1]
fit <- rstan::stan(file=models[[1]], data = stan_data)
fit <- rstan::stan(file=models[[1]], data = stan_datai, iter=500, chains = 2)
fit <- rstan::stan(file=models[[1]], data = stan_datai, iter=500, chains = 2)
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(2))
fit <- rstan::stan(file=models[[1]], data = stan_datai, iter=200, chains = 1)
fit <- rstan::stan(file=models[[1]], data = stan_data, iter=200, chains = 1)
fit <- rstan::stan(file=models[[1]], data = stan_datai, iter=300, chains = 3)
fit <- rstan::stan(file=models[[1]], data = stan_data, iter=300, chains = 3)
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(2))
fit <- rstan::stan(file=models[[1]], data = stan_data, iter=1000, chains = 4)
util <- new.env()
source('stan_utility.R', local=util)
source('R/stan_utility.R', local=util)
util$check_all_diagnostics(fit)
util$check_all_diagnostics(fit[1])
util$check_all_diagnostics(fit)
print(fit)
partition <- util$partition_div(fit)
div_params <- partition[[1]]
nondiv_params <- partition[[2]]
util2 <- new.env()
source('R/stan_utility.R', local=util2)
util2$check_all_diagnostics(fit)
summary(fit)
summary(fit)$summary
summary(fit)[1]$summary
summary(fit[])
summary(fit)
summary(fit)
summary(fit[[1]])
params <- extract(fit)
rstan::summary(fit)
rstan::summary(fit)$summary
summary(fit)$summary
util2$check_all_diagnostics(fit)
util2$check_all_diagnostics(fit)
util2$check_all_diagnostics(fit)
devtools::load_all(".")
util2$check_all_diagnostics(fit)
util2 <- new.env()
source('R/stan_utility.R', local=util2)
util2$check_all_diagnostics(fit)
util2 <- new.env()
source('R/stan_utility.R', local=util2)
util2$check_all_diagnostics(fit)
util2 <- new.env()
util2 <- new.env()
source('R/stan_utility.R', local=util2)
util2$check_all_diagnostics(fit)
View(exp_data)
params = extract(fit)
params <- rstan::extract(fit)
plot(params$beta, params$rho)
models2 <- BayesianPain::get_models(c(3))
fit2 <- rstan::stan(file=models2[[1]], data = stan_data, iter=1000, chains = 4)
rstan::summary(fit, pars=c('beta', 'rho'))$summary
rstan::summary(fit2, pars=c('beta', 'rho'))$summary
calc_DIC(fit)
BayesianPain::calc_DIC(fit)
BayesianPain::calc_DIC(fit2)
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_1_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(1,2,3,4,5))
output <- BayesianPain::fit_models(models, stan_data, iter=1000, chains = 4)
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_1_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(1,2,3,4,5))
output <- BayesianPain::fit_models(models, stan_data, iter=1000, chains = 4)
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_1_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(1,2,3,4,5))
output <- BayesianPain::fit_models(models, stan_data, iter=2000, chains = 4)
devtools::install_github("dan-ak/bayesian-pain")
devtools::load_all(".")
devtools::install_github("dan-ak/bayesian-pain")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_1_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(1,2,3,4,5))
output <- BayesianPain::fit_models(models, stan_data, iter=2000, chains = 4)
devtools::load_all(".")
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_1_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(5))
output <- BayesianPain::fit_models(models, stan_data, iter=400, chains = 3)
output$DICs
models[[1]]
models[1]
for (m in models){m}
for (m in models){print(m)}
for (m in models){print(m[1])}
devtools::load_all(".")
output <- BayesianPain::fit_models(models, stan_data, iter=400, chains = 3)
devtools::load_all(".")
output <- BayesianPain::fit_models(models, stan_data, iter=200, chains = 2)
fit <- rstan::stan(models[i], stan_data, chains =2, iter=200)
fit <- rstan::stan(models[1], stan_data, chains =2, iter=200)
models[1]
models <- BayesianPain::get_models(c(5))
fit <- rstan::stan(models[1], stan_data, chains =2, iter=200)
devtools::load_all(".")
models <- BayesianPain::get_models(c(5))
models
remove.packages(BayesianPain)
remove.packages('BayesianPain')
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_1_data.csv', header = TRUE)))
devtools::load_all(".")
stan_data <- BayesianPain::create_stan_data(exp_data)
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_1_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(5))
fit <- rstan::stan(models[1], stan_data, chains =2, iter=200)
models[1]
models <- vector("list", length(model_numbers))
models <- vector("list", length(c(5,6)))
models
models[1]
models[[1]]
models[1] <- 4
models
models[[1]] <- 4
models
models <- c()
models[1] <- 'asdf'
models[2] <- 'asdf1'
models[1]
models[2]
source('~/Documents/Code/2020/BayesianPain/R/fit_functions.R', echo=TRUE)
devtools::load_all(".")
devtools::load_all(".")
models <- BayesianPain::get_models(c(4,5))
models[1]
models[2]
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_1_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
fit <- rstan::stan(models[1], stan_data, chains =2, iter=200)
fit <- rstan::stan(file=models[1], stan_data, chains =2, iter=200)
models[1]
models[[1]]
fit <- rstan::stan(file=models[1], data=stan_data, chains =2, iter=200)
output <- BayesianPain::fit_models(models, stan_data, iter=200, chains = 2)
rstan::extract(fit, "log_lik_t")
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_1_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <- BayesianPain::get_models(c(1,2,3,4,5))
output <- BayesianPain::fit_models(models, stan_data, iter=200, chains = 2)
fit <- rstan::stan(file=models[1], data=stan_data, chains =2, iter=200)
rstan::extract(fit, "log_lik_s")
rstan::extract(fit, "log_lik_s")$log_lik_s
mean(rstan::extract(fit, "log_lik_s")$log_lik_s)
fits <- vector("list", 5)
fits[1] <- fit
fits <- c()
fits[1] <- fit
fits[[1]] <- fit
fits <- vector("list", length(models))
fits[[1]] <- fit
fits[1]
fits[[1]]
devtools::load_all(".")
output <- BayesianPain::fit_models(models, stan_data, iter=200, chains = 2)
warnings()
output$DICs
output <- BayesianPain::fit_models(models, stan_data, iter=1000, chains = 4)
output$DICs
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
output <- BayesianPain::fit_models(models, stan_data, iter=1000, chains = 4)
output$DICs
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
remove.packages("BayesianPain")
devtools::load_all(".")
devtools::load_all(".")
install.packages("BayesianPain")
devtools::load_all(".")
devtools::load_all(".")
remove.packages("BayesianPain")
install.packages("BayesianPain")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
install.packages("tidyverse")
df_tidy = data.frame(name = c('john', 'john', 'mary', 'mary', 'jane', 'jane'),
result = c(10, 11, 20, 25, 5, 10),
treatment = c('a', 'b', 'a', 'b', 'a', 'b'))
df_tidy
model_full = lmer(data = df_tidy,
result ~ treatment + (1 | name))
library(lmer)
install.packages(lmer)
install.packages('lmer')
install.packages('lme4')
model_full = lmer(data = df_tidy,
result ~ treatment + (1 | name))
model_full = lme4::lmer(data = df_tidy, result ~ treatment + (1 | name))
library(lme4)
library('lme4')
install.packages('nloptr')
mtcars
devtools::load_all(".")
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
models <-BayesianPain::get_modesl(c(2))
models <-BayesianPain::get_models(c(2))
output <- BayesianPain::fit_models(models, stan_data, iter=200, chains = 2)
exp_data <- BayesianPain::center_scale(data.frame(read.csv('data/exp_1_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data)
output1 <- BayesianPain::fit_models(models, stan_data, iter=200, chains = 2)
models <- BayesianPain::get_models(c(1,3,4,5,6))
exp_data2 <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data2)
output2 <- BayesianPain::fit_models(models, stan_data, iter=2000, chains = 3)
warnings()
output2$DICs
models <- BayesianPain::get_models(c(6))
models <- BayesianPain::get_models(c(3))
output2 <- BayesianPain::fit_models(models, stan_data, iter=5000, chains = 5)
output2$DICs
models <- BayesianPain::get_models(c(4))
output2 <- BayesianPain::fit_models(models, stan_data, iter=5000, chains = 5)
output2 <- BayesianPain::fit_models(models, stan_data, iter=5000, chains = 5)
devtools::load_all(".")
exp_data2 <- BayesianPain::center_scale(data.frame(read.csv('data/exp_2_data.csv', header = TRUE)))
stan_data <- BayesianPain::create_stan_data(exp_data2)
models <- BayesianPain::get_models(c(4))
output2 <- BayesianPain::fit_models(models, stan_data, iter=5000, chains = 5)
output2$DICs
models <- BayesianPain::get_models(c(5))
output2 <- BayesianPain::fit_models(models, stan_data, iter=5000, chains = 5)
output2$DICs
models <- BayesianPain::get_models(c(6))
output2 <- BayesianPain::fit_models(models, stan_data, iter=5000, chains = 5)
install.packages("rstan")
