// Generated by rstantools.  Do not edit by hand.

/*
    BayesianPain is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BayesianPain is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BayesianPain.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_model_5_bremn_var_mle_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_model_5_bremn_var_mle");
    reader.add_event(123, 121, "end", "model_model_5_bremn_var_mle");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
get_mean(const T0__& m1,
             const T1__& m2,
             const T2__& s1,
             const T3__& s2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 23;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((m1 * s2) * s2) + ((m2 * s1) * s1)) / ((s1 * s1) + (s2 * s2))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_mean_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& m1,
             const T1__& m2,
             const T2__& s1,
             const T3__& s2, std::ostream* pstream__) const {
        return get_mean(m1, m2, s1, s2, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
get_std(const T0__& m1,
            const T1__& m2,
            const T2__& s1,
            const T3__& s2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 25;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::sqrt(((((s1 * s1) * s2) * s2) / ((s1 * s1) + (s2 * s2)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_std_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& m1,
            const T1__& m2,
            const T2__& s1,
            const T3__& s2, std::ostream* pstream__) const {
        return get_std(m1, m2, s1, s2, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
get_mean3(const T0__& m1,
              const T1__& m2,
              const T2__& m3,
              const T3__& s1,
              const T4__& s2,
              const T5__& s3, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 29;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_mean(m1, get_mean(m2, m3, s2, s3, pstream__), s1, get_std(m2, m3, s2, s3, pstream__), pstream__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_mean3_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
    operator()(const T0__& m1,
              const T1__& m2,
              const T2__& m3,
              const T3__& s1,
              const T4__& s2,
              const T5__& s3, std::ostream* pstream__) const {
        return get_mean3(m1, m2, m3, s1, s2, s3, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
get_std3(const T0__& m1,
             const T1__& m2,
             const T2__& m3,
             const T3__& s1,
             const T4__& s2,
             const T5__& s3, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 31;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_std(m1, get_mean(m2, m3, s2, s3, pstream__), s1, get_std(m2, m3, s2, s3, pstream__), pstream__));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_std3_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
    operator()(const T0__& m1,
             const T1__& m2,
             const T2__& m3,
             const T3__& s1,
             const T4__& s2,
             const T5__& s3, std::ostream* pstream__) const {
        return get_std3(m1, m2, m3, s1, s2, s3, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_model_5_bremn_var_mle
  : public stan::model::model_base_crtp<model_model_5_bremn_var_mle> {
private:
        int N;
        std::vector<int> subject;
        vector_d q;
        vector_d std;
        vector_d X;
        vector_d r;
        double mu_u;
        double rho_u;
        double nu_u;
        double beta_u;
        double eta_u;
        double mu_s;
        double rho_s;
        double nu_s;
        double beta_s;
        double eta_s;
        int S;
public:
    model_model_5_bremn_var_mle(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_model_5_bremn_var_mle(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_model_5_bremn_var_mle_namespace::model_model_5_bremn_var_mle";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 36;
            validate_non_negative_index("subject", "N", N);
            context__.validate_dims("data initialization", "subject", "int", context__.to_vec(N));
            subject = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("subject");
            pos__ = 0;
            size_t subject_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < subject_k_0_max__; ++k_0__) {
                subject[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("q", "N", N);
            context__.validate_dims("data initialization", "q", "vector_d", context__.to_vec(N));
            q = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("q");
            pos__ = 0;
            size_t q_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
                q(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 38;
            validate_non_negative_index("std", "N", N);
            context__.validate_dims("data initialization", "std", "vector_d", context__.to_vec(N));
            std = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("std");
            pos__ = 0;
            size_t std_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < std_j_1_max__; ++j_1__) {
                std(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 39;
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "vector_d", context__.to_vec(N));
            X = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                X(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 40;
            validate_non_negative_index("r", "N", N);
            context__.validate_dims("data initialization", "r", "vector_d", context__.to_vec(N));
            r = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("r");
            pos__ = 0;
            size_t r_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                r(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "r", r, 0);
            check_less_or_equal(function__, "r", r, 100);
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "mu_u", "double", context__.to_vec());
            mu_u = double(0);
            vals_r__ = context__.vals_r("mu_u");
            pos__ = 0;
            mu_u = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_u", mu_u, 0);
            check_less_or_equal(function__, "mu_u", mu_u, 80);
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "rho_u", "double", context__.to_vec());
            rho_u = double(0);
            vals_r__ = context__.vals_r("rho_u");
            pos__ = 0;
            rho_u = vals_r__[pos__++];
            check_greater_or_equal(function__, "rho_u", rho_u, 0);
            check_less_or_equal(function__, "rho_u", rho_u, 100);
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "nu_u", "double", context__.to_vec());
            nu_u = double(0);
            vals_r__ = context__.vals_r("nu_u");
            pos__ = 0;
            nu_u = vals_r__[pos__++];
            check_greater_or_equal(function__, "nu_u", nu_u, 0);
            check_less_or_equal(function__, "nu_u", nu_u, 100);
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "beta_u", "double", context__.to_vec());
            beta_u = double(0);
            vals_r__ = context__.vals_r("beta_u");
            pos__ = 0;
            beta_u = vals_r__[pos__++];
            check_greater_or_equal(function__, "beta_u", beta_u, 0);
            check_less_or_equal(function__, "beta_u", beta_u, 100);
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "eta_u", "double", context__.to_vec());
            eta_u = double(0);
            vals_r__ = context__.vals_r("eta_u");
            pos__ = 0;
            eta_u = vals_r__[pos__++];
            check_greater_or_equal(function__, "eta_u", eta_u, -(10));
            check_less_or_equal(function__, "eta_u", eta_u, 10);
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "mu_s", "double", context__.to_vec());
            mu_s = double(0);
            vals_r__ = context__.vals_r("mu_s");
            pos__ = 0;
            mu_s = vals_r__[pos__++];
            check_greater_or_equal(function__, "mu_s", mu_s, 0);
            check_less_or_equal(function__, "mu_s", mu_s, 100);
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "rho_s", "double", context__.to_vec());
            rho_s = double(0);
            vals_r__ = context__.vals_r("rho_s");
            pos__ = 0;
            rho_s = vals_r__[pos__++];
            check_greater_or_equal(function__, "rho_s", rho_s, 0);
            check_less_or_equal(function__, "rho_s", rho_s, 100);
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "nu_s", "double", context__.to_vec());
            nu_s = double(0);
            vals_r__ = context__.vals_r("nu_s");
            pos__ = 0;
            nu_s = vals_r__[pos__++];
            check_greater_or_equal(function__, "nu_s", nu_s, 0);
            check_less_or_equal(function__, "nu_s", nu_s, 100);
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "beta_s", "double", context__.to_vec());
            beta_s = double(0);
            vals_r__ = context__.vals_r("beta_s");
            pos__ = 0;
            beta_s = vals_r__[pos__++];
            check_greater_or_equal(function__, "beta_s", beta_s, 0);
            check_less_or_equal(function__, "beta_s", beta_s, 100);
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "eta_s", "double", context__.to_vec());
            eta_s = double(0);
            vals_r__ = context__.vals_r("eta_s");
            pos__ = 0;
            eta_s = vals_r__[pos__++];
            check_greater_or_equal(function__, "eta_s", eta_s, 0);
            check_less_or_equal(function__, "eta_s", eta_s, 100);
            // initialize transformed data variables
            current_statement_begin__ = 56;
            S = int(0);
            stan::math::fill(S, std::numeric_limits<int>::min());
            stan::math::assign(S,max(subject));
            // execute transformed data statements
            // validate transformed data
            current_statement_begin__ = 56;
            check_greater_or_equal(function__, "S", S, 0);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 61;
            validate_non_negative_index("beta", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 62;
            validate_non_negative_index("rho", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 63;
            validate_non_negative_index("eta", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 64;
            validate_non_negative_index("mu", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 65;
            validate_non_negative_index("nu", "S", S);
            num_params_r__ += S;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_model_5_bremn_var_mle() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 61;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "S", S);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(S);
        size_t beta_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 100, beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 62;
        if (!(context__.contains_r("rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        validate_non_negative_index("rho", "S", S);
        context__.validate_dims("parameter initialization", "rho", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> rho(S);
        size_t rho_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            rho(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 100, rho);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 63;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "S", S);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta(S);
        size_t eta_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(-(10), 10, eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 64;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "S", S);
        context__.validate_dims("parameter initialization", "mu", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu(S);
        size_t mu_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            mu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 100, mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 65;
        if (!(context__.contains_r("nu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu");
        pos__ = 0U;
        validate_non_negative_index("nu", "S", S);
        context__.validate_dims("parameter initialization", "nu", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu(S);
        size_t nu_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            nu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 100, nu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 61;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_lub_constrain(0, 100, S, lp__);
            else
                beta = in__.vector_lub_constrain(0, 100, S);
            current_statement_begin__ = 62;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.vector_lub_constrain(0, 100, S, lp__);
            else
                rho = in__.vector_lub_constrain(0, 100, S);
            current_statement_begin__ = 63;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.vector_lub_constrain(-(10), 10, S, lp__);
            else
                eta = in__.vector_lub_constrain(-(10), 10, S);
            current_statement_begin__ = 64;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.vector_lub_constrain(0, 100, S, lp__);
            else
                mu = in__.vector_lub_constrain(0, 100, S);
            current_statement_begin__ = 65;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nu;
            (void) nu;  // dummy to suppress unused var warning
            if (jacobian__)
                nu = in__.vector_lub_constrain(0, 100, S, lp__);
            else
                nu = in__.vector_lub_constrain(0, 100, S);
            // transformed parameters
            current_statement_begin__ = 71;
            validate_non_negative_index("beta_n", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_n(N);
            stan::math::initialize(beta_n, DUMMY_VAR__);
            stan::math::fill(beta_n, DUMMY_VAR__);
            current_statement_begin__ = 72;
            validate_non_negative_index("rho_n", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rho_n(N);
            stan::math::initialize(rho_n, DUMMY_VAR__);
            stan::math::fill(rho_n, DUMMY_VAR__);
            current_statement_begin__ = 73;
            validate_non_negative_index("eta_n", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_n(N);
            stan::math::initialize(eta_n, DUMMY_VAR__);
            stan::math::fill(eta_n, DUMMY_VAR__);
            current_statement_begin__ = 74;
            validate_non_negative_index("mu_n", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_n(N);
            stan::math::initialize(mu_n, DUMMY_VAR__);
            stan::math::fill(mu_n, DUMMY_VAR__);
            current_statement_begin__ = 75;
            validate_non_negative_index("nu_n", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nu_n(N);
            stan::math::initialize(nu_n, DUMMY_VAR__);
            stan::math::fill(nu_n, DUMMY_VAR__);
            current_statement_begin__ = 78;
            validate_non_negative_index("mean_p", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mean_p(N);
            stan::math::initialize(mean_p, DUMMY_VAR__);
            stan::math::fill(mean_p, DUMMY_VAR__);
            current_statement_begin__ = 79;
            validate_non_negative_index("std_p", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> std_p(N);
            stan::math::initialize(std_p, DUMMY_VAR__);
            stan::math::fill(std_p, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 81;
            for (int n = 1; n <= N; ++n) {
                {
                current_statement_begin__ = 82;
                int s(0);
                (void) s;  // dummy to suppress unused var warning
                stan::math::fill(s, std::numeric_limits<int>::min());
                stan::math::assign(s,get_base1(subject, n, "subject", 1));
                current_statement_begin__ = 83;
                stan::model::assign(beta_n, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_base1(beta, s, "beta", 1), 
                            "assigning variable beta_n");
                current_statement_begin__ = 84;
                stan::model::assign(rho_n, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_base1(rho, s, "rho", 1), 
                            "assigning variable rho_n");
                current_statement_begin__ = 85;
                stan::model::assign(eta_n, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_base1(eta, s, "eta", 1), 
                            "assigning variable eta_n");
                current_statement_begin__ = 86;
                stan::model::assign(mu_n, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_base1(mu, s, "mu", 1), 
                            "assigning variable mu_n");
                current_statement_begin__ = 87;
                stan::model::assign(nu_n, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_base1(nu, s, "nu", 1), 
                            "assigning variable nu_n");
                current_statement_begin__ = 89;
                stan::model::assign(mean_p, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_mean3(get_base1(X, n, "X", 1), get_base1(q, n, "q", 1), get_base1(mu_n, n, "mu_n", 1), get_base1(beta_n, n, "beta_n", 1), (get_base1(rho_n, n, "rho_n", 1) + (get_base1(eta_n, n, "eta_n", 1) * get_base1(std, n, "std", 1))), get_base1(nu_n, n, "nu_n", 1), pstream__), 
                            "assigning variable mean_p");
                current_statement_begin__ = 90;
                stan::model::assign(std_p, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_std3(get_base1(X, n, "X", 1), get_base1(q, n, "q", 1), get_base1(mu_n, n, "mu_n", 1), get_base1(beta_n, n, "beta_n", 1), (get_base1(rho_n, n, "rho_n", 1) + (get_base1(eta_n, n, "eta_n", 1) * get_base1(std, n, "std", 1))), get_base1(nu_n, n, "nu_n", 1), pstream__), 
                            "assigning variable std_p");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 71;
            size_t beta_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < beta_n_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta_n(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta_n" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta_n: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 72;
            size_t rho_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < rho_n_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(rho_n(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: rho_n" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable rho_n: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 73;
            size_t eta_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < eta_n_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(eta_n(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: eta_n" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta_n: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 74;
            size_t mu_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_n_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu_n(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_n" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_n: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 75;
            size_t nu_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < nu_n_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(nu_n(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: nu_n" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable nu_n: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 78;
            size_t mean_p_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mean_p_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mean_p(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mean_p" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mean_p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 79;
            size_t std_p_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < std_p_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(std_p(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: std_p" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable std_p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 95;
            lp_accum__.add(normal_log<propto__>(beta, beta_u, beta_s));
            current_statement_begin__ = 96;
            lp_accum__.add(normal_log<propto__>(rho, rho_u, rho_s));
            current_statement_begin__ = 97;
            lp_accum__.add(normal_log<propto__>(eta, eta_u, eta_s));
            current_statement_begin__ = 98;
            lp_accum__.add(normal_log<propto__>(mu, mu_u, mu_s));
            current_statement_begin__ = 99;
            lp_accum__.add(normal_log<propto__>(nu, nu_u, nu_s));
            current_statement_begin__ = 101;
            lp_accum__.add(normal_log<propto__>(r, mean_p, std_p));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("rho");
        names__.push_back("eta");
        names__.push_back("mu");
        names__.push_back("nu");
        names__.push_back("beta_n");
        names__.push_back("rho_n");
        names__.push_back("eta_n");
        names__.push_back("mu_n");
        names__.push_back("nu_n");
        names__.push_back("mean_p");
        names__.push_back("std_p");
        names__.push_back("log_lik_t");
        names__.push_back("log_lik_s");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_model_5_bremn_var_mle_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_lub_constrain(0, 100, S);
        size_t beta_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> rho = in__.vector_lub_constrain(0, 100, S);
        size_t rho_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            vars__.push_back(rho(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta = in__.vector_lub_constrain(-(10), 10, S);
        size_t eta_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            vars__.push_back(eta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu = in__.vector_lub_constrain(0, 100, S);
        size_t mu_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            vars__.push_back(mu(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu = in__.vector_lub_constrain(0, 100, S);
        size_t nu_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            vars__.push_back(nu(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 71;
            validate_non_negative_index("beta_n", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta_n(N);
            stan::math::initialize(beta_n, DUMMY_VAR__);
            stan::math::fill(beta_n, DUMMY_VAR__);
            current_statement_begin__ = 72;
            validate_non_negative_index("rho_n", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> rho_n(N);
            stan::math::initialize(rho_n, DUMMY_VAR__);
            stan::math::fill(rho_n, DUMMY_VAR__);
            current_statement_begin__ = 73;
            validate_non_negative_index("eta_n", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> eta_n(N);
            stan::math::initialize(eta_n, DUMMY_VAR__);
            stan::math::fill(eta_n, DUMMY_VAR__);
            current_statement_begin__ = 74;
            validate_non_negative_index("mu_n", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_n(N);
            stan::math::initialize(mu_n, DUMMY_VAR__);
            stan::math::fill(mu_n, DUMMY_VAR__);
            current_statement_begin__ = 75;
            validate_non_negative_index("nu_n", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> nu_n(N);
            stan::math::initialize(nu_n, DUMMY_VAR__);
            stan::math::fill(nu_n, DUMMY_VAR__);
            current_statement_begin__ = 78;
            validate_non_negative_index("mean_p", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mean_p(N);
            stan::math::initialize(mean_p, DUMMY_VAR__);
            stan::math::fill(mean_p, DUMMY_VAR__);
            current_statement_begin__ = 79;
            validate_non_negative_index("std_p", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> std_p(N);
            stan::math::initialize(std_p, DUMMY_VAR__);
            stan::math::fill(std_p, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 81;
            for (int n = 1; n <= N; ++n) {
                {
                current_statement_begin__ = 82;
                int s(0);
                (void) s;  // dummy to suppress unused var warning
                stan::math::fill(s, std::numeric_limits<int>::min());
                stan::math::assign(s,get_base1(subject, n, "subject", 1));
                current_statement_begin__ = 83;
                stan::model::assign(beta_n, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_base1(beta, s, "beta", 1), 
                            "assigning variable beta_n");
                current_statement_begin__ = 84;
                stan::model::assign(rho_n, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_base1(rho, s, "rho", 1), 
                            "assigning variable rho_n");
                current_statement_begin__ = 85;
                stan::model::assign(eta_n, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_base1(eta, s, "eta", 1), 
                            "assigning variable eta_n");
                current_statement_begin__ = 86;
                stan::model::assign(mu_n, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_base1(mu, s, "mu", 1), 
                            "assigning variable mu_n");
                current_statement_begin__ = 87;
                stan::model::assign(nu_n, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_base1(nu, s, "nu", 1), 
                            "assigning variable nu_n");
                current_statement_begin__ = 89;
                stan::model::assign(mean_p, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_mean3(get_base1(X, n, "X", 1), get_base1(q, n, "q", 1), get_base1(mu_n, n, "mu_n", 1), get_base1(beta_n, n, "beta_n", 1), (get_base1(rho_n, n, "rho_n", 1) + (get_base1(eta_n, n, "eta_n", 1) * get_base1(std, n, "std", 1))), get_base1(nu_n, n, "nu_n", 1), pstream__), 
                            "assigning variable mean_p");
                current_statement_begin__ = 90;
                stan::model::assign(std_p, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            get_std3(get_base1(X, n, "X", 1), get_base1(q, n, "q", 1), get_base1(mu_n, n, "mu_n", 1), get_base1(beta_n, n, "beta_n", 1), (get_base1(rho_n, n, "rho_n", 1) + (get_base1(eta_n, n, "eta_n", 1) * get_base1(std, n, "std", 1))), get_base1(nu_n, n, "nu_n", 1), pstream__), 
                            "assigning variable std_p");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t beta_n_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < beta_n_j_1_max__; ++j_1__) {
                    vars__.push_back(beta_n(j_1__));
                }
                size_t rho_n_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < rho_n_j_1_max__; ++j_1__) {
                    vars__.push_back(rho_n(j_1__));
                }
                size_t eta_n_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < eta_n_j_1_max__; ++j_1__) {
                    vars__.push_back(eta_n(j_1__));
                }
                size_t mu_n_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mu_n_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_n(j_1__));
                }
                size_t nu_n_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < nu_n_j_1_max__; ++j_1__) {
                    vars__.push_back(nu_n(j_1__));
                }
                size_t mean_p_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mean_p_j_1_max__; ++j_1__) {
                    vars__.push_back(mean_p(j_1__));
                }
                size_t std_p_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < std_p_j_1_max__; ++j_1__) {
                    vars__.push_back(std_p(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 105;
            double log_lik_t;
            (void) log_lik_t;  // dummy to suppress unused var warning
            stan::math::initialize(log_lik_t, DUMMY_VAR__);
            stan::math::fill(log_lik_t, DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("log_lik_s", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik_s(S);
            stan::math::initialize(log_lik_s, DUMMY_VAR__);
            stan::math::fill(log_lik_s, DUMMY_VAR__);
            current_statement_begin__ = 107;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 110;
            stan::math::assign(log_lik_t, 0.0);
            current_statement_begin__ = 111;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 111;
                stan::model::assign(log_lik_s, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            0.0, 
                            "assigning variable log_lik_s");
            }
            current_statement_begin__ = 113;
            for (int n = 1; n <= N; ++n) {
                {
                current_statement_begin__ = 114;
                int s(0);
                (void) s;  // dummy to suppress unused var warning
                stan::math::fill(s, std::numeric_limits<int>::min());
                stan::math::assign(s,get_base1(subject, n, "subject", 1));
                current_statement_begin__ = 116;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            normal_log(get_base1(r, n, "r", 1), get_base1(mean_p, n, "mean_p", 1), get_base1(std_p, n, "std_p", 1)), 
                            "assigning variable log_lik");
                current_statement_begin__ = 117;
                stan::model::assign(log_lik_s, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            (get_base1(log_lik_s, s, "log_lik_s", 1) + get_base1(log_lik, n, "log_lik", 1)), 
                            "assigning variable log_lik_s");
                current_statement_begin__ = 118;
                stan::math::assign(log_lik_t, (log_lik_t + get_base1(log_lik, n, "log_lik", 1)));
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 105;
            vars__.push_back(log_lik_t);
            current_statement_begin__ = 106;
            size_t log_lik_s_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < log_lik_s_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik_s(j_1__));
            }
            current_statement_begin__ = 107;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_model_5_bremn_var_mle";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rho_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < beta_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t rho_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < rho_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < eta_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t nu_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < nu_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mean_p_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mean_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mean_p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t std_p_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < std_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "std_p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik_t";
        param_names__.push_back(param_name_stream__.str());
        size_t log_lik_s_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < log_lik_s_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik_s" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rho_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < beta_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t rho_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < rho_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < eta_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t nu_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < nu_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mean_p_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mean_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mean_p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t std_p_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < std_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "std_p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik_t";
        param_names__.push_back(param_name_stream__.str());
        size_t log_lik_s_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < log_lik_s_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik_s" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_model_5_bremn_var_mle_namespace::model_model_5_bremn_var_mle stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
